#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 10

struct Queue {
    int items[MAX_VERTICES];
    int front;
    int rear;
};

void initQueue(struct Queue* queue) {
    queue->front = -1;
    queue->rear = -1;
}

bool isEmpty(struct Queue* queue) {
    return queue->rear == -1;
}

void enqueue(struct Queue* queue, int value) {
    if (queue->rear == MAX_VERTICES - 1)
        printf("Queue is full\n");
    else {
        if (queue->front == -1)
            queue->front = 0;
        queue->rear++;
        queue->items[queue->rear] = value;
    }
}

int dequeue(struct Queue* queue) {
    int item;
    if (isEmpty(queue)) {
        printf("Queue is empty\n");
        item = -1;
    } else {
        item = queue->items[queue->front];
        queue->front++;
        if (queue->front > queue->rear) {
            queue->front = queue->rear = -1;
        }
    }
    return item;
}

struct Graph {
    int vertices;
    bool adjacency_matrix[MAX_VERTICES][MAX_VERTICES];
    bool visited[MAX_VERTICES];
};

void initGraph(struct Graph* graph, int vertices) {
    graph->vertices = vertices;
    for (int i = 0; i < vertices; i++) {
        graph->visited[i] = false;
        for (int j = 0; j < vertices; j++) {
            graph->adjacency_matrix[i][j] = false;
        }
    }
}

void addEdge(struct Graph* graph, int src, int dest) {
    graph->adjacency_matrix[src][dest] = true;

}

void BFS(struct Graph* graph, int start_vertex) {
    struct Queue queue;
    initQueue(&queue);

    graph->visited[start_vertex] = true;
    enqueue(&queue, start_vertex);

    while (!isEmpty(&queue)) {

        int current_vertex = dequeue(&queue);
        printf("%d ", current_vertex);

        for (int i = 0; i < graph->vertices; i++) {
            if (graph->adjacency_matrix[current_vertex][i] && !graph->visited[i]) {
                graph->visited[i] = true;
                enqueue(&queue, i);
            }
        }
    }
}

int main() {
    int vertices, edges;
    printf("Enter the number of vertices: ");
    scanf("%d", &vertices);

    struct Graph graph;
    initGraph(&graph, vertices);

    printf("Enter the number of edges: ");
    scanf("%d", &edges);

    printf("Enter the edges (source destination):\n");
    for (int i = 0; i < edges; i++) {
        int src, dest;
        scanf("%d %d", &src, &dest);
        addEdge(&graph, src, dest);
    }

    int start_vertex;
    printf("Enter the starting vertex for BFS: ");
    scanf("%d", &start_vertex);

    printf("Breadth First Traversal starting from vertex %d: ", start_vertex);
    BFS(&graph, start_vertex);
    printf("\n");

    return 0;
}
input:Enter the number of vertices: 5
Enter the number of edges: 6
Enter the edges (source destination):
0 1
0 2
1 3
1 4
2 4
3 5
Enter the starting vertex for BFS: 0

poutput:Breadth First Traversal starting from vertex 0: 0 1 2 3 4 
